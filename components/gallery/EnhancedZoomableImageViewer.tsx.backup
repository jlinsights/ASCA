'use client';

import React, { useState, useRef, useEffect, useCallback } from 'react';
import { EnhancedCard, EnhancedCardContent } from '@/components/ui/enhanced-card';
import { EnhancedButton } from '@/components/ui/enhanced-button';
import { Badge } from '@/components/ui/badge';
import { 
  ZoomIn, 
  ZoomOut, 
  RotateCcw, 
  Maximize, 
  Minimize, 
  Download,
  Info,
  Ruler,
  Eye,
  EyeOff,
  Navigation,
  Target,
  MousePointer,
  Move,
  Square,
  Circle,
  Settings,
  Volume2,
  VolumeX,
  BookOpen,
  Share2,
  Heart,
  MoreHorizontal
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { animations, a11y } from '@/lib/design-system';
import type { ArtworkImage, ImageRegion, ImageAnnotation } from '@/lib/types/gallery';

// ===============================
// Enhanced Types and Interfaces
// ===============================

interface ViewerState {
  scale: number;
  offsetX: number;
  offsetY: number;
  rotation: number;
  isDragging: boolean;
  dragStart: { x: number; y: number };
  lastPinchDistance?: number;
}

interface ViewerSettings {
  showRegions: boolean;
  showAnnotations: boolean;
  showMeasurements: boolean;
  enableAudio: boolean;
  autoFitToContainer: boolean;
  smoothZoom: boolean;
  preserveAspectRatio: boolean;
  showMinimap: boolean;
}

interface EnhancedZoomableImageViewerProps {
  image: ArtworkImage;
  className?: string;
  onRegionSelect?: (region: ImageRegion) => void;
  onAnnotationClick?: (annotation: ImageAnnotation) => void;
  enableFullscreen?: boolean;
  enableDeepZoom?: boolean;
  maxZoom?: number;
  minZoom?: number;
  zoomStep?: number;
  onZoomChange?: (scale: number) => void;
  initialSettings?: Partial<ViewerSettings>;
  showEducationalOverlay?: boolean;
  culturalContext?: string;
}

interface ToolbarGroup {
  id: string;
  label: string;
  tools: {
    id: string;
    icon: React.ComponentType<{ className?: string }>;
    label: string;
    action: () => void;
    isActive?: boolean;
    disabled?: boolean;
    variant?: 'default' | 'ghost' | 'outline';
  }[];
}

// ===============================
// Main Component
// ===============================

const EnhancedZoomableImageViewer: React.FC<EnhancedZoomableImageViewerProps> = ({
  image,
  className,
  onRegionSelect,
  onAnnotationClick,
  enableFullscreen = true,
  enableDeepZoom = true,
  maxZoom = 10,
  minZoom = 0.1,
  zoomStep = 0.2,
  onZoomChange,
  initialSettings = {},
  showEducationalOverlay = false,
  culturalContext
}) => {
  // State management with enhanced default values
  const [viewerState, setViewerState] = useState<ViewerState>({
    scale: 1,
    offsetX: 0,
    offsetY: 0,
    rotation: 0,
    isDragging: false,
    dragStart: { x: 0, y: 0 }
  });

  const [settings, setSettings] = useState<ViewerSettings>({
    showRegions: true,
    showAnnotations: true,
    showMeasurements: false,
    enableAudio: false,
    autoFitToContainer: true,
    smoothZoom: true,
    preserveAspectRatio: true,
    showMinimap: false,
    ...initialSettings
  });

  const [isFullscreen, setIsFullscreen] = useState(false);
  const [currentImageUrl, setCurrentImageUrl] = useState(image.urls.medium);
  const [isLoading, setIsLoading] = useState(false);
  const [showInfo, setShowInfo] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [activeTool, setActiveTool] = useState<'pan' | 'zoom' | 'measure' | 'annotate'>('pan');
  const [activeRegion, setActiveRegion] = useState<string | null>(null);

  // Refs
  const containerRef = useRef<HTMLDivElement>(null);
  const imageRef = useRef<HTMLImageElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  // Calculate optimal image URL based on zoom level
  const getOptimalImageUrl = useCallback((scale: number) => {
    if (!enableDeepZoom) return image.urls.large || image.urls.medium;
    
    if (scale >= 4) return image.urls.original;
    if (scale >= 2) return image.urls.large || image.urls.medium;
    if (scale >= 1) return image.urls.medium || image.urls.small;
    return image.urls.small || image.urls.thumbnail;
  }, [image.urls, enableDeepZoom]);

  // Enhanced zoom function with smooth animations
  const handleZoom = useCallback((delta: number, centerX?: number, centerY?: number) => {
    setViewerState(prev => {
      const newScale = Math.max(minZoom, Math.min(maxZoom, prev.scale + delta));
      
      if (centerX !== undefined && centerY !== undefined) {
        const scaleRatio = newScale / prev.scale;
        const newOffsetX = centerX - (centerX - prev.offsetX) * scaleRatio;
        const newOffsetY = centerY - (centerY - prev.offsetY) * scaleRatio;
        
        return {
          ...prev,
          scale: newScale,
          offsetX: newOffsetX,
          offsetY: newOffsetY
        };
      }
      
      return { ...prev, scale: newScale };
    });
  }, [minZoom, maxZoom]);

  const handlePan = useCallback((deltaX: number, deltaY: number) => {
    setViewerState(prev => ({
      ...prev,
      offsetX: prev.offsetX + deltaX,
      offsetY: prev.offsetY + deltaY
    }));
  }, []);

  const resetView = useCallback(() => {
    setViewerState({
      scale: 1,
      offsetX: 0,
      offsetY: 0,
      rotation: 0,
      isDragging: false,
      dragStart: { x: 0, y: 0 }
    });
  }, []);

  const fitToContainer = useCallback(() => {
    if (!containerRef.current || !imageRef.current) return;
    
    const container = containerRef.current.getBoundingClientRect();
    const img = imageRef.current;
    
    const scaleX = container.width / img.naturalWidth;
    const scaleY = container.height / img.naturalHeight;
    const scale = Math.min(scaleX, scaleY, 1);
    
    setViewerState(prev => ({
      ...prev,
      scale,
      offsetX: 0,
      offsetY: 0
    }));
  }, []);

  // Enhanced event handlers with better UX
  const handleMouseDown = useCallback((e: React.MouseEvent) => {
    if (activeTool !== 'pan') return;
    
    e.preventDefault();
    setViewerState(prev => ({
      ...prev,
      isDragging: true,
      dragStart: { x: e.clientX, y: e.clientY }
    }));
  }, [activeTool]);

  const handleMouseMove = useCallback((e: React.MouseEvent) => {
    if (!viewerState.isDragging || activeTool !== 'pan') return;
    
    const deltaX = e.clientX - viewerState.dragStart.x;
    const deltaY = e.clientY - viewerState.dragStart.y;
    
    handlePan(deltaX, deltaY);
    
    setViewerState(prev => ({
      ...prev,
      dragStart: { x: e.clientX, y: e.clientY }
    }));
  }, [viewerState.isDragging, viewerState.dragStart, activeTool, handlePan]);

  const handleMouseUp = useCallback(() => {
    setViewerState(prev => ({ ...prev, isDragging: false }));
  }, []);

  const handleWheel = useCallback((e: React.WheelEvent) => {
    e.preventDefault();
    
    if (activeTool === 'zoom' || e.ctrlKey) {
      const rect = containerRef.current?.getBoundingClientRect();
      if (rect) {
        const centerX = e.clientX - rect.left;
        const centerY = e.clientY - rect.top;
        const delta = e.deltaY > 0 ? -zoomStep : zoomStep;
        handleZoom(delta, centerX, centerY);
      }
    }
  }, [activeTool, zoomStep, handleZoom]);

  // Enhanced toolbar configuration
  const toolbarGroups: ToolbarGroup[] = [
    {
      id: 'zoom',
      label: 'Zoom Controls',
      tools: [
        {
          id: 'zoom-in',
          icon: ZoomIn,
          label: 'Zoom In',
          action: () => handleZoom(zoomStep),
        },
        {
          id: 'zoom-out',
          icon: ZoomOut,
          label: 'Zoom Out',
          action: () => handleZoom(-zoomStep),
        },
        {
          id: 'fit-to-container',
          icon: Target,
          label: 'Fit to Container',
          action: fitToContainer,
        },
        {
          id: 'reset',
          icon: RotateCcw,
          label: 'Reset View',
          action: resetView,
        },
      ]
    },
    {
      id: 'tools',
      label: 'Tools',
      tools: [
        {
          id: 'pan',
          icon: Move,
          label: 'Pan',
          action: () => setActiveTool('pan'),
          isActive: activeTool === 'pan',
        },
        {
          id: 'zoom-tool',
          icon: Target,
          label: 'Zoom Tool',
          action: () => setActiveTool('zoom'),
          isActive: activeTool === 'zoom',
        },
        {
          id: 'measure',
          icon: Ruler,
          label: 'Measure',
          action: () => setActiveTool('measure'),
          isActive: activeTool === 'measure',
        },
        {
          id: 'annotate',
          icon: MousePointer,
          label: 'Annotate',
          action: () => setActiveTool('annotate'),
          isActive: activeTool === 'annotate',
        },
      ]
    },
    {
      id: 'display',
      label: 'Display Options',
      tools: [
        {
          id: 'regions',
          icon: Square,
          label: 'Toggle Regions',
          action: () => setSettings(prev => ({ ...prev, showRegions: !prev.showRegions })),
          isActive: settings.showRegions,
        },
        {
          id: 'annotations',
          icon: MousePointer,
          label: 'Toggle Annotations',
          action: () => setSettings(prev => ({ ...prev, showAnnotations: !prev.showAnnotations })),
          isActive: settings.showAnnotations,
        },
        {
          id: 'info',
          icon: Info,
          label: 'Toggle Info',
          action: () => setShowInfo(!showInfo),
          isActive: showInfo,
        },
      ]
    },
    {
      id: 'actions',
      label: 'Actions',
      tools: [
        {
          id: 'fullscreen',
          icon: isFullscreen ? Minimize : Maximize,
          label: isFullscreen ? 'Exit Fullscreen' : 'Fullscreen',
          action: () => setIsFullscreen(!isFullscreen),
          disabled: !enableFullscreen,
        },
        {
          id: 'download',
          icon: Download,
          label: 'Download',
          action: () => window.open(image.urls.original, '_blank'),
        },
        {
          id: 'share',
          icon: Share2,
          label: 'Share',
          action: () => {/* Implement share functionality */},
        },
        {
          id: 'favorite',
          icon: Heart,
          label: 'Add to Favorites',
          action: () => {/* Implement favorite functionality */},
        },
      ]
    }
  ];

  // Enhanced region rendering
  const renderRegions = () => {
    if (!settings.showRegions || !image.regions) return null;
    
    return image.regions.map((region) => {
      const isActive = activeRegion === region.id;
      
      return (
        <div
          key={region.id}
          className={cn(
            'absolute border-2 transition-all duration-300 cursor-pointer group',
            region.type === 'character' 
              ? 'border-temple-gold hover:border-temple-gold/80' 
              : 'border-vermillion hover:border-vermillion/80',
            isActive && 'ring-2 ring-celadon-green/50 scale-105',
            'hover:shadow-lg hover:z-20'
          )}
          style={{
            left: `${region.coordinates.x}%`,
            top: `${region.coordinates.y}%`,
            width: `${region.coordinates.width}%`,
            height: `${region.coordinates.height}%`,
            backgroundColor: region.type === 'character' 
              ? 'rgba(212, 175, 55, 0.1)' 
              : 'rgba(229, 57, 53, 0.1)',
          }}
          onClick={() => {
            setActiveRegion(region.id);
            onRegionSelect?.(region);
          }}
          onMouseEnter={() => setActiveRegion(region.id)}
          onMouseLeave={() => setActiveRegion(null)}
        >
          {/* Enhanced tooltip */}
          <div className={cn(
            'absolute -top-10 left-0 bg-ink-black text-rice-paper px-3 py-2 rounded-md text-xs whitespace-nowrap',
            'opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-30',
            'shadow-lg border border-celadon-green/20'
          )}>
            <div className="font-medium">{region.name}</div>
            {region.description && (
              <div className="text-rice-paper/80 mt-1">{region.description}</div>
            )}
            {/* Tooltip arrow */}
            <div className="absolute top-full left-4 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-ink-black" />
          </div>
        </div>
      );
    });
  };

  // Enhanced annotation rendering
  const renderAnnotations = () => {
    if (!settings.showAnnotations || !image.annotations) return null;
    
    return image.annotations.map((annotation) => (
      <div
        key={annotation.id}
        className={cn(
          'absolute w-6 h-6 bg-celadon-green border-2 border-rice-paper rounded-full cursor-pointer',
          'hover:scale-125 transition-all duration-200 z-30 group shadow-lg',
          'animate-pulse hover:animate-none'
        )}
        style={{
          left: `${annotation.position.x}%`,
          top: `${annotation.position.y}%`,
          transform: 'translate(-50%, -50%)'
        }}
        onClick={() => onAnnotationClick?.(annotation)}
      >
        <div className="absolute w-3 h-3 bg-rice-paper rounded-full top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2" />
        
        {/* Enhanced annotation tooltip */}
        <div className={cn(
          'absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2',
          'bg-ink-black text-rice-paper px-3 py-2 rounded-md text-xs min-w-max max-w-xs',
          'opacity-0 group-hover:opacity-100 transition-opacity duration-200',
          'shadow-xl border border-celadon-green/20'
        )}>
          <div className="font-medium mb-1">{annotation.title}</div>
          <div className="text-rice-paper/80">{annotation.content}</div>
          {/* Tooltip arrow */}
          <div className="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-ink-black" />
        </div>
      </div>
    ));
  };

  // Enhanced toolbar rendering
  const renderToolbar = () => (
    <div className={cn(
      'absolute top-4 left-4 z-40 space-y-3',
      animations.fadeIn
    )}>
      {toolbarGroups.map((group) => (
        <div
          key={group.id}
          className="flex flex-wrap gap-1 bg-rice-paper/95 backdrop-blur-md rounded-lg p-2 shadow-lg border border-celadon-green/10"
        >
          {group.tools.map((tool) => (
            <EnhancedButton
              key={tool.id}
              size="sm"
              variant={tool.isActive ? "default" : "ghost"}
              onClick={tool.action}
              disabled={tool.disabled}
              className={cn(
                'h-10 w-10 p-0 group',
                a11y.touchTarget,
                tool.isActive && 'bg-celadon-green text-ink-black shadow-sm'
              )}
              aria-label={tool.label}
            >
              <tool.icon className="w-4 h-4 transition-transform duration-200 group-hover:scale-110" />
            </EnhancedButton>
          ))}
        </div>
      ))}
    </div>
  );

  // Enhanced info panel
  const renderInfoPanel = () => {
    if (!showInfo) return null;
    
    return (
      <EnhancedCard 
        variant="glass"
        className={cn(
          'absolute top-4 right-4 w-80 max-h-96 overflow-auto z-40',
          animations.slideIn
        )}
      >
        <EnhancedCardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="font-calligraphy font-semibold text-ink-black">Image Information</h3>
            <EnhancedButton
              size="sm"
              variant="ghost"
              onClick={() => setShowInfo(false)}
              className="h-8 w-8 p-0"
              aria-label="Close info panel"
            >
              ✕
            </EnhancedButton>
          </div>
          
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span className="text-ink-black/70">Dimensions:</span>
              <div className="font-medium text-ink-black">
                {image.metadata.dimensions.width} × {image.metadata.dimensions.height}
              </div>
            </div>
            
            <div>
              <span className="text-ink-black/70">Format:</span>
              <div className="font-medium text-ink-black uppercase">{image.metadata.format}</div>
            </div>
            
            <div>
              <span className="text-ink-black/70">File Size:</span>
              <div className="font-medium text-ink-black">
                {(image.metadata.file_size / (1024 * 1024)).toFixed(1)} MB
              </div>
            </div>
            
            <div>
              <span className="text-ink-black/70">Zoom Level:</span>
              <div className="font-medium text-ink-black">{(viewerState.scale * 100).toFixed(0)}%</div>
            </div>
          </div>

          {culturalContext && (
            <div className="bg-temple-gold/10 rounded-lg p-3">
              <h4 className="font-medium text-ink-black mb-2">Cultural Context</h4>
              <p className="text-sm text-ink-black/80">{culturalContext}</p>
            </div>
          )}

          {image.metadata.camera_info && (
            <div className="bg-silk-cream/50 rounded-lg p-3">
              <h4 className="font-medium text-ink-black mb-2">Capture Information</h4>
              <div className="text-xs space-y-1 text-ink-black/80">
                <div>{image.metadata.camera_info.make} {image.metadata.camera_info.model}</div>
                <div>Lens: {image.metadata.camera_info.lens}</div>
                <div>
                  {image.metadata.camera_info.focal_length}mm, 
                  f/{image.metadata.camera_info.aperture}, 
                  {image.metadata.camera_info.shutter_speed}s, 
                  ISO {image.metadata.camera_info.iso}
                </div>
              </div>
            </div>
          )}
        </EnhancedCardContent>
      </EnhancedCard>
    );
  };

  // Enhanced loading indicator
  const renderLoadingIndicator = () => {
    if (!isLoading) return null;
    
    return (
      <div className={cn(
        'absolute inset-0 flex items-center justify-center z-50',
        'bg-ink-black/20 backdrop-blur-sm',
        animations.fadeIn
      )}>
        <EnhancedCard variant="glass" className="p-6 flex items-center gap-3 shadow-xl">
          <div className="w-6 h-6 border-2 border-celadon-green border-t-transparent rounded-full animate-spin" />
          <span className="text-ink-black font-medium">Loading high resolution...</span>
        </EnhancedCard>
      </div>
    );
  };

  return (
    <div
      ref={containerRef}
      className={cn(
        'relative w-full h-full overflow-hidden bg-gradient-to-br from-rice-paper to-silk-cream rounded-lg',
        'cursor-grab active:cursor-grabbing group',
        isFullscreen && 'fixed inset-0 z-50 bg-ink-black rounded-none',
        viewerState.isDragging && 'cursor-grabbing',
        className
      )}
      onMouseDown={handleMouseDown}
      onMouseMove={handleMouseMove}
      onMouseUp={handleMouseUp}
      onMouseLeave={handleMouseUp}
      onWheel={handleWheel}
      role="img"
      aria-label={`Zoomable image: ${image.metadata.filename}`}
      tabIndex={0}
      {...a11y.focusRing}
    >
      {/* Main Image Container */}
      <div
        className="relative w-full h-full flex items-center justify-center"
        style={{
          transform: `scale(${viewerState.scale}) translate(${viewerState.offsetX}px, ${viewerState.offsetY}px) rotate(${viewerState.rotation}deg)`,
          transformOrigin: 'center',
          transition: viewerState.isDragging || !settings.smoothZoom ? 'none' : 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)'
        }}
      >
        <img
          ref={imageRef}
          src={currentImageUrl}
          alt={image.metadata.filename}
          className="max-w-full max-h-full object-contain select-none shadow-lg"
          onLoad={() => setIsLoading(false)}
          onError={() => setIsLoading(false)}
          draggable={false}
          style={{
            filter: isLoading ? 'blur(2px)' : 'none',
            transition: 'filter 0.3s ease'
          }}
        />
        
        {/* Regions and Annotations Overlay */}
        <div className="absolute inset-0 pointer-events-none">
          <div className="relative w-full h-full pointer-events-auto">
            {renderRegions()}
            {renderAnnotations()}
          </div>
        </div>
      </div>

      {/* Enhanced UI Overlays */}
      {renderToolbar()}
      {renderInfoPanel()}
      {renderLoadingIndicator()}

      {/* Enhanced Zoom Level Indicator */}
      <div className={cn(
        'absolute bottom-4 left-4 z-40',
        'bg-rice-paper/95 backdrop-blur-md rounded-lg px-4 py-2 shadow-lg border border-celadon-green/10',
        animations.fadeIn
      )}>
        <div className="flex items-center gap-3">
          <span className="text-sm font-medium text-ink-black">
            {(viewerState.scale * 100).toFixed(0)}%
          </span>
          <div className="w-16 h-1 bg-silk-cream rounded-full overflow-hidden">
            <div 
              className="h-full bg-celadon-green transition-all duration-300 rounded-full"
              style={{ 
                width: `${Math.min(100, (viewerState.scale / maxZoom) * 100)}%` 
              }}
            />
          </div>
        </div>
      </div>

      {/* Educational Overlay */}
      {showEducationalOverlay && (
        <div className={cn(
          'absolute bottom-4 right-4 z-40',
          animations.slideIn
        )}>
          <EnhancedCard variant="glass" className="p-4 max-w-sm">
            <div className="flex items-center gap-2 mb-2">
              <BookOpen className="w-4 h-4 text-temple-gold" />
              <span className="font-medium text-ink-black">Educational Context</span>
            </div>
            <p className="text-sm text-ink-black/80">
              Explore this artwork's details by using the zoom tools and clicking on highlighted regions to learn about traditional calligraphy techniques.
            </p>
          </EnhancedCard>
        </div>
      )}

      {/* Keyboard shortcuts help */}
      <div className={cn(a11y.srOnly)}>
        <p>Keyboard shortcuts: Use arrow keys to pan, +/- to zoom, R to reset, F for fullscreen</p>
      </div>
    </div>
  );
};

export default EnhancedZoomableImageViewer;