'use client';

import React, { useState, useRef, useEffect, useCallback } from 'react';
import { 
  EnhancedCard, 
  EnhancedCardContent, 
  EnhancedCardHeader, 
  EnhancedCardTitle,
  EnhancedCardDescription 
} from '@/components/ui/enhanced-card';
import { EnhancedButton } from '@/components/ui/enhanced-button';
import { Badge } from '@/components/ui/badge';
import { 
  ArrowLeftRight, 
  RotateCcw, 
  ZoomIn, 
  ZoomOut, 
  Maximize, 
  Minimize,
  Eye,
  EyeOff,
  Link,
  Unlink,
  Grid3X3,
  MoreHorizontal,
  Download,
  Share2,
  BookOpen,
  Info,
  ChevronLeft,
  ChevronRight,
  Square,
  Circle,
  Ruler,
  Palette,
  Move,
  MousePointer,
  Layers,
  Target,
  Settings,
  Shuffle,
  Compare,
  SplitSquareHorizontal
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { animations, a11y, layouts } from '@/lib/design-system';
import type { Artwork, ArtworkImage, ImageRegion } from '@/lib/types/gallery';

// ===============================
// Enhanced Types and Interfaces
// ===============================

interface ComparisonMode {
  type: 'side-by-side' | 'overlay' | 'split-view' | 'grid' | 'swipe';
  syncZoom: boolean;
  syncPan: boolean;
  showAnnotations: boolean;
  showRegions: boolean;
  overlayOpacity?: number;
  splitPosition?: number;
}

interface ComparisonAnalysis {
  similarities: string[];
  differences: string[];
  techniques: {
    brushwork: string;
    composition: string;
    style: string;
  };
  cultural_context: string;
  educational_notes: string[];
  expert_commentary?: string;
}

interface EnhancedArtworkComparisonProps {
  artworks: Artwork[];
  initialMode?: ComparisonMode;
  maxArtworks?: number;
  onAnalysisRequest?: (artworkIds: string[]) => Promise<ComparisonAnalysis>;
  className?: string;
  showEducationalFeatures?: boolean;
  enableAdvancedAnalysis?: boolean;
}

interface ViewerState {
  scale: number;
  offsetX: number;
  offsetY: number;
  isDragging: boolean;
  dragStart: { x: number; y: number };
}

interface ComparisonMetrics {
  viewTime: number;
  zoomInteractions: number;
  regionsViewed: string[];
  analysisRequests: number;
}

// ===============================
// Main Component
// ===============================

const EnhancedArtworkComparison: React.FC<EnhancedArtworkComparisonProps> = ({
  artworks,
  initialMode = {
    type: 'side-by-side',
    syncZoom: true,
    syncPan: true,
    showAnnotations: false,
    showRegions: true
  },
  maxArtworks = 4,
  onAnalysisRequest,
  className,
  showEducationalFeatures = true,
  enableAdvancedAnalysis = true
}) => {
  const [selectedArtworks, setSelectedArtworks] = useState<Artwork[]>(
    artworks.slice(0, Math.min(2, artworks.length))
  );
  const [comparisonMode, setComparisonMode] = useState<ComparisonMode>(initialMode);
  const [viewerStates, setViewerStates] = useState<ViewerState[]>([
    { scale: 1, offsetX: 0, offsetY: 0, isDragging: false, dragStart: { x: 0, y: 0 } },
    { scale: 1, offsetX: 0, offsetY: 0, isDragging: false, dragStart: { x: 0, y: 0 } }
  ]);
  const [analysis, setAnalysis] = useState<ComparisonAnalysis | null>(null);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [showAnalysis, setShowAnalysis] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [metrics, setMetrics] = useState<ComparisonMetrics>({
    viewTime: 0,
    zoomInteractions: 0,
    regionsViewed: [],
    analysisRequests: 0
  });

  const containerRef = useRef<HTMLDivElement>(null);
  const imageRefs = useRef<(HTMLImageElement | null)[]>([]);
  const swipeRef = useRef<HTMLDivElement>(null);

  // Initialize viewer states when artworks change
  useEffect(() => {
    const states = selectedArtworks.map(() => ({
      scale: 1,
      offsetX: 0,
      offsetY: 0,
      isDragging: false,
      dragStart: { x: 0, y: 0 }
    }));
    setViewerStates(states);
  }, [selectedArtworks]);

  // Enhanced artwork selection management
  const addArtwork = useCallback((artwork: Artwork) => {
    if (selectedArtworks.length < maxArtworks && !selectedArtworks.find(a => a.id === artwork.id)) {
      setSelectedArtworks(prev => [...prev, artwork]);
    }
  }, [selectedArtworks, maxArtworks]);

  const removeArtwork = useCallback((artworkId: string) => {
    setSelectedArtworks(prev => prev.filter(a => a.id !== artworkId));
  }, []);

  const replaceArtwork = useCallback((index: number, artwork: Artwork) => {
    setSelectedArtworks(prev => {
      const newArtworks = [...prev];
      newArtworks[index] = artwork;
      return newArtworks;
    });
  }, []);

  const shuffleArtworks = useCallback(() => {
    setSelectedArtworks(prev => [...prev].sort(() => Math.random() - 0.5));
  }, []);

  // Enhanced zoom and pan management
  const updateViewerState = useCallback((index: number, updates: Partial<ViewerState>) => {
    setViewerStates(prev => {
      const newStates = [...prev];
      newStates[index] = { ...newStates[index], ...updates };
      
      // Enhanced sync logic
      if ((comparisonMode.syncZoom && updates.scale !== undefined) ||
          (comparisonMode.syncPan && (updates.offsetX !== undefined || updates.offsetY !== undefined))) {
        for (let i = 0; i < newStates.length; i++) {
          if (i !== index) {
            if (comparisonMode.syncZoom && updates.scale !== undefined) {
              newStates[i].scale = updates.scale;
            }
            if (comparisonMode.syncPan) {
              if (updates.offsetX !== undefined) newStates[i].offsetX = updates.offsetX;
              if (updates.offsetY !== undefined) newStates[i].offsetY = updates.offsetY;
            }
          }
        }
      }
      
      return newStates;
    });

    // Track zoom interactions
    if (updates.scale !== undefined) {
      setMetrics(prev => ({ ...prev, zoomInteractions: prev.zoomInteractions + 1 }));
    }
  }, [comparisonMode.syncZoom, comparisonMode.syncPan]);

  // Enhanced analysis function
  const requestAnalysis = async () => {
    if (!onAnalysisRequest || selectedArtworks.length < 2) return;
    
    setIsAnalyzing(true);
    try {
      const artworkIds = selectedArtworks.map(artwork => artwork.id);
      const analysisResult = await onAnalysisRequest(artworkIds);
      setAnalysis(analysisResult);
      setShowAnalysis(true);
      setMetrics(prev => ({ ...prev, analysisRequests: prev.analysisRequests + 1 }));
    } catch (error) {
      console.error('Failed to get comparison analysis:', error);
    } finally {
      setIsAnalyzing(false);
    }
  };

  // Enhanced comparison modes
  const comparisonModes = [
    {
      id: 'side-by-side' as const,
      icon: ArrowLeftRight,
      label: 'Side by Side',
      description: 'View artworks next to each other'
    },
    {
      id: 'overlay' as const,
      icon: Layers,
      label: 'Overlay',
      description: 'Overlay one artwork on top of another'
    },
    {
      id: 'split-view' as const,
      icon: SplitSquareHorizontal,
      label: 'Split View',
      description: 'Split screen comparison'
    },
    {
      id: 'swipe' as const,
      icon: Shuffle,
      label: 'Swipe Compare',
      description: 'Swipe between artworks'
    }
  ];

  // Enhanced artwork selector with better UX
  const renderArtworkSelector = () => (
    <EnhancedCard variant="elevated" className="mb-6">
      <EnhancedCardHeader>
        <div className="flex items-center justify-between">
          <div>
            <EnhancedCardTitle>Select Artworks to Compare</EnhancedCardTitle>
            <EnhancedCardDescription>
              Choose up to {maxArtworks} artworks for detailed comparison analysis
            </EnhancedCardDescription>
          </div>
          <div className="flex gap-2">
            <EnhancedButton
              size="sm"
              variant="outline"
              onClick={shuffleArtworks}
              disabled={selectedArtworks.length < 2}
              leftIcon={<Shuffle className="w-4 h-4" />}
            >
              Shuffle
            </EnhancedButton>
            <Badge variant="outline" className="text-sm">
              {selectedArtworks.length}/{maxArtworks}
            </Badge>
          </div>
        </div>
      </EnhancedCardHeader>
      <EnhancedCardContent>
        <div className={cn(layouts.grid.responsive, 'gap-4')}>
          {artworks.map((artwork) => {
            const isSelected = selectedArtworks.find(a => a.id === artwork.id);
            const primaryImage = artwork.images.find(img => img.type === 'primary') || artwork.images[0];
            
            return (
              <EnhancedCard
                key={artwork.id}
                interactive
                variant={isSelected ? "bordered" : "default"}
                className={cn(
                  'group overflow-hidden transition-all duration-300',
                  isSelected && 'ring-2 ring-celadon-green shadow-lg scale-105',
                  !isSelected && selectedArtworks.length >= maxArtworks && 'opacity-50 cursor-not-allowed'
                )}
                onClick={() => {
                  if (isSelected) {
                    removeArtwork(artwork.id);
                  } else if (selectedArtworks.length < maxArtworks) {
                    addArtwork(artwork);
                  }
                }}
              >
                <div className="aspect-square relative overflow-hidden">
                  <img
                    src={primaryImage?.urls.small || '/placeholder-artwork.jpg'}
                    alt={artwork.title.english}
                    className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
                  />
                  
                  {/* Enhanced overlay */}
                  <div className="absolute inset-0 bg-gradient-to-t from-ink-black/80 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                    <div className="absolute bottom-0 left-0 right-0 p-4 text-rice-paper">
                      <h4 className="font-calligraphy font-semibold text-sm line-clamp-1 mb-1">
                        {artwork.title.original}
                      </h4>
                      <p className="text-xs opacity-80 line-clamp-1">{artwork.artist.name}</p>
                      <div className="flex items-center gap-2 mt-2">
                        <Badge variant="outline" className="text-xs border-rice-paper/30 text-rice-paper">
                          {artwork.historical_context.creation_date.period}
                        </Badge>
                        <Badge variant="outline" className="text-xs border-rice-paper/30 text-rice-paper">
                          {artwork.artistic_analysis.style.name.english}
                        </Badge>
                      </div>
                    </div>
                  </div>
                  
                  {/* Selection indicator */}
                  {isSelected && (
                    <div className="absolute top-3 right-3 bg-celadon-green text-ink-black rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold shadow-lg">
                      ✓
                    </div>
                  )}
                </div>
              </EnhancedCard>
            );
          })}
        </div>
      </EnhancedCardContent>
    </EnhancedCard>
  );

  // Enhanced toolbar with better organization
  const renderToolbar = () => (
    <EnhancedCard variant="glass" className="mb-6">
      <EnhancedCardContent className="p-4">
        <div className="flex flex-wrap items-center gap-4">
          {/* Comparison Mode Selection */}
          <div className="flex items-center gap-2">
            <span className="text-sm font-medium text-ink-black/70">Mode:</span>
            <div className="flex gap-1 bg-silk-cream/50 rounded-lg p-1">
              {comparisonModes.map(({ id, icon: Icon, label }) => (
                <EnhancedButton
                  key={id}
                  size="sm"
                  variant={comparisonMode.type === id ? "default" : "ghost"}
                  onClick={() => setComparisonMode(prev => ({ ...prev, type: id }))}
                  className="group relative"
                  aria-label={label}
                >
                  <Icon className="w-4 h-4" />
                  
                  {/* Tooltip */}
                  <div className={cn(
                    'absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2',
                    'bg-ink-black text-rice-paper px-2 py-1 rounded text-xs whitespace-nowrap',
                    'opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none',
                    'shadow-lg border border-celadon-green/20'
                  )}>
                    {label}
                  </div>
                </EnhancedButton>
              ))}
            </div>
          </div>

          {/* Sync Controls */}
          <div className="flex items-center gap-2">
            <span className="text-sm font-medium text-ink-black/70">Sync:</span>
            <div className="flex gap-1">
              <EnhancedButton
                size="sm"
                variant={comparisonMode.syncZoom ? "default" : "outline"}
                onClick={() => setComparisonMode(prev => ({ ...prev, syncZoom: !prev.syncZoom }))}
                leftIcon={comparisonMode.syncZoom ? <Link className="w-3 h-3" /> : <Unlink className="w-3 h-3" />}
                className="text-xs"
              >
                Zoom
              </EnhancedButton>
              <EnhancedButton
                size="sm"
                variant={comparisonMode.syncPan ? "default" : "outline"}
                onClick={() => setComparisonMode(prev => ({ ...prev, syncPan: !prev.syncPan }))}
                leftIcon={comparisonMode.syncPan ? <Link className="w-3 h-3" /> : <Unlink className="w-3 h-3" />}
                className="text-xs"
              >
                Pan
              </EnhancedButton>
            </div>
          </div>

          {/* Display Options */}
          <div className="flex items-center gap-2">
            <span className="text-sm font-medium text-ink-black/70">Show:</span>
            <div className="flex gap-1">
              <EnhancedButton
                size="sm"
                variant={comparisonMode.showRegions ? "default" : "outline"}
                onClick={() => setComparisonMode(prev => ({ ...prev, showRegions: !prev.showRegions }))}
                leftIcon={<Square className="w-3 h-3" />}
                className="text-xs"
              >
                Regions
              </EnhancedButton>
              <EnhancedButton
                size="sm"
                variant={comparisonMode.showAnnotations ? "default" : "outline"}
                onClick={() => setComparisonMode(prev => ({ ...prev, showAnnotations: !prev.showAnnotations }))}
                leftIcon={<MousePointer className="w-3 h-3" />}
                className="text-xs"
              >
                Notes
              </EnhancedButton>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex items-center gap-2 ml-auto">
            {enableAdvancedAnalysis && onAnalysisRequest && selectedArtworks.length >= 2 && (
              <EnhancedButton
                size="sm"
                variant="outline"
                onClick={requestAnalysis}
                isLoading={isAnalyzing}
                loadingText="Analyzing..."
                leftIcon={<Compare className="w-4 h-4" />}
                className="border-temple-gold text-temple-gold hover:bg-temple-gold hover:text-ink-black"
              >
                AI Analysis
              </EnhancedButton>
            )}

            <EnhancedButton
              size="sm"
              variant="outline"
              onClick={() => setShowSettings(!showSettings)}
              leftIcon={<Settings className="w-4 h-4" />}
            >
              Settings
            </EnhancedButton>

            <EnhancedButton
              size="sm"
              variant="outline"
              onClick={() => setIsFullscreen(!isFullscreen)}
              leftIcon={isFullscreen ? <Minimize className="w-4 h-4" /> : <Maximize className="w-4 h-4" />}
            >
              {isFullscreen ? 'Exit' : 'Fullscreen'}
            </EnhancedButton>
          </div>
        </div>

        {/* Advanced Settings Panel */}
        {showSettings && (
          <div className={cn(
            'mt-4 p-4 bg-silk-cream/50 rounded-lg border border-celadon-green/10',
            animations.slideIn
          )}>
            <h4 className="font-medium text-ink-black mb-3">Advanced Settings</h4>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {comparisonMode.type === 'overlay' && (
                <div>
                  <label className="block text-sm font-medium text-ink-black/70 mb-2">
                    Overlay Opacity
                  </label>
                  <input
                    type="range"
                    min="0"
                    max="100"
                    value={comparisonMode.overlayOpacity || 50}
                    onChange={(e) => setComparisonMode(prev => ({ 
                      ...prev, 
                      overlayOpacity: parseInt(e.target.value) 
                    }))}
                    className="w-full h-2 bg-silk-cream rounded-lg appearance-none cursor-pointer"
                  />
                  <div className="text-xs text-ink-black/60 mt-1">
                    {comparisonMode.overlayOpacity || 50}%
                  </div>
                </div>
              )}

              {comparisonMode.type === 'split-view' && (
                <div>
                  <label className="block text-sm font-medium text-ink-black/70 mb-2">
                    Split Position
                  </label>
                  <input
                    type="range"
                    min="10"
                    max="90"
                    value={comparisonMode.splitPosition || 50}
                    onChange={(e) => setComparisonMode(prev => ({ 
                      ...prev, 
                      splitPosition: parseInt(e.target.value) 
                    }))}
                    className="w-full h-2 bg-silk-cream rounded-lg appearance-none cursor-pointer"
                  />
                  <div className="text-xs text-ink-black/60 mt-1">
                    {comparisonMode.splitPosition || 50}%
                  </div>
                </div>
              )}

              <div>
                <label className="block text-sm font-medium text-ink-black/70 mb-2">
                  Quick Actions
                </label>
                <div className="flex gap-2">
                  <EnhancedButton
                    size="xs"
                    variant="outline"
                    onClick={() => {/* Reset all views */}}
                    leftIcon={<RotateCcw className="w-3 h-3" />}
                  >
                    Reset
                  </EnhancedButton>
                  <EnhancedButton
                    size="xs"
                    variant="outline"
                    onClick={() => {/* Export comparison */}}
                    leftIcon={<Download className="w-3 h-3" />}
                  >
                    Export
                  </EnhancedButton>
                </div>
              </div>
            </div>
          </div>
        )}
      </EnhancedCardContent>
    </EnhancedCard>
  );

  // Enhanced comparison view renderer
  const renderComparisonView = () => {
    if (selectedArtworks.length === 0) {
      return (
        <EnhancedCard className="text-center py-12">
          <EnhancedCardContent>
            <Compare className="w-16 h-16 text-ink-black/20 mx-auto mb-4" />
            <EnhancedCardTitle className="mb-2">No Artworks Selected</EnhancedCardTitle>
            <EnhancedCardDescription className="mb-4">
              Select at least one artwork from the gallery above to begin comparison.
            </EnhancedCardDescription>
            <EnhancedButton
              variant="outline"
              onClick={() => {
                if (artworks.length > 0) {
                  setSelectedArtworks(artworks.slice(0, 2));
                }
              }}
            >
              Auto-select Artworks
            </EnhancedButton>
          </EnhancedCardContent>
        </EnhancedCard>
      );
    }

    // Render based on comparison mode
    switch (comparisonMode.type) {
      case 'side-by-side':
        return renderSideBySideView();
      case 'overlay':
        return renderOverlayView();
      case 'split-view':
        return renderSplitView();
      case 'swipe':
        return renderSwipeView();
      default:
        return renderSideBySideView();
    }
  };

  // Enhanced side-by-side view
  const renderSideBySideView = () => (
    <div className={cn(
      'grid gap-6',
      selectedArtworks.length === 1 && 'grid-cols-1',
      selectedArtworks.length === 2 && 'grid-cols-1 lg:grid-cols-2',
      selectedArtworks.length === 3 && 'grid-cols-1 lg:grid-cols-3',
      selectedArtworks.length >= 4 && 'grid-cols-1 lg:grid-cols-2 xl:grid-cols-4'
    )}>
      {selectedArtworks.map((artwork, index) => (
        <EnhancedCard key={artwork.id} variant="elevated" className="group overflow-hidden">
          {renderImageViewer(artwork, index)}
        </EnhancedCard>
      ))}
    </div>
  );

  // Enhanced overlay view
  const renderOverlayView = () => {
    if (selectedArtworks.length < 2) return renderSideBySideView();

    return (
      <EnhancedCard variant="elevated" className="relative overflow-hidden">
        <div className="relative aspect-video">
          {/* Base image */}
          {renderImageViewer(selectedArtworks[0], 0)}
          
          {/* Overlay image */}
          <div 
            className="absolute inset-0" 
            style={{ opacity: (comparisonMode.overlayOpacity || 50) / 100 }}
          >
            {renderImageViewer(selectedArtworks[1], 1)}
          </div>

          {/* Overlay controls */}
          <div className="absolute top-4 right-4 bg-rice-paper/95 backdrop-blur-md rounded-lg p-2 shadow-lg">
            <div className="flex items-center gap-2 text-sm">
              <span className="text-ink-black/70">Overlay:</span>
              <input
                type="range"
                min="0"
                max="100"
                value={comparisonMode.overlayOpacity || 50}
                onChange={(e) => setComparisonMode(prev => ({ 
                  ...prev, 
                  overlayOpacity: parseInt(e.target.value) 
                }))}
                className="w-20 h-2 bg-silk-cream rounded-lg appearance-none cursor-pointer"
              />
              <span className="text-ink-black font-medium min-w-[3ch]">
                {comparisonMode.overlayOpacity || 50}%
              </span>
            </div>
          </div>
        </div>
      </EnhancedCard>
    );
  };

  // Enhanced split view
  const renderSplitView = () => {
    if (selectedArtworks.length < 2) return renderSideBySideView();

    const splitPosition = comparisonMode.splitPosition || 50;

    return (
      <EnhancedCard variant="elevated" className="relative overflow-hidden">
        <div className="relative aspect-video">
          {/* Left side */}
          <div 
            className="absolute inset-y-0 left-0 overflow-hidden"
            style={{ width: `${splitPosition}%` }}
          >
            {renderImageViewer(selectedArtworks[0], 0)}
          </div>

          {/* Right side */}
          <div 
            className="absolute inset-y-0 right-0 overflow-hidden"
            style={{ width: `${100 - splitPosition}%` }}
          >
            {renderImageViewer(selectedArtworks[1], 1)}
          </div>

          {/* Split line with handle */}
          <div 
            className="absolute inset-y-0 w-1 bg-celadon-green cursor-col-resize group hover:w-2 transition-all duration-200"
            style={{ left: `${splitPosition}%`, transform: 'translateX(-50%)' }}
            onMouseDown={(e) => {
              // Handle drag to adjust split position
              const startX = e.clientX;
              const startPosition = splitPosition;
              
              const handleMouseMove = (e: MouseEvent) => {
                const rect = containerRef.current?.getBoundingClientRect();
                if (rect) {
                  const newPosition = Math.max(10, Math.min(90, 
                    startPosition + ((e.clientX - startX) / rect.width) * 100
                  ));
                  setComparisonMode(prev => ({ ...prev, splitPosition: newPosition }));
                }
              };

              const handleMouseUp = () => {
                document.removeEventListener('mousemove', handleMouseMove);
                document.removeEventListener('mouseup', handleMouseUp);
              };

              document.addEventListener('mousemove', handleMouseMove);
              document.addEventListener('mouseup', handleMouseUp);
            }}
          >
            <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-6 h-6 bg-celadon-green rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-200">
              <ArrowLeftRight className="w-3 h-3 text-ink-black" />
            </div>
          </div>
        </div>
      </EnhancedCard>
    );
  };

  // Enhanced swipe view
  const renderSwipeView = () => {
    const [currentIndex, setCurrentIndex] = useState(0);

    return (
      <EnhancedCard variant="elevated" className="relative overflow-hidden">
        <div className="relative aspect-video">
          {renderImageViewer(selectedArtworks[currentIndex], currentIndex)}

          {/* Swipe controls */}
          <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2">
            <EnhancedButton
              size="sm"
              variant="outline"
              onClick={() => setCurrentIndex(Math.max(0, currentIndex - 1))}
              disabled={currentIndex === 0}
              leftIcon={<ChevronLeft className="w-4 h-4" />}
              className="bg-rice-paper/95 backdrop-blur-md"
            >
              Previous
            </EnhancedButton>

            <div className="flex items-center gap-1 px-3 py-2 bg-rice-paper/95 backdrop-blur-md rounded-md">
              {selectedArtworks.map((_, index) => (
                <button
                  key={index}
                  className={cn(
                    'w-2 h-2 rounded-full transition-all duration-200',
                    index === currentIndex ? 'bg-celadon-green' : 'bg-ink-black/30'
                  )}
                  onClick={() => setCurrentIndex(index)}
                />
              ))}
            </div>

            <EnhancedButton
              size="sm"
              variant="outline"
              onClick={() => setCurrentIndex(Math.min(selectedArtworks.length - 1, currentIndex + 1))}
              disabled={currentIndex === selectedArtworks.length - 1}
              rightIcon={<ChevronRight className="w-4 h-4" />}
              className="bg-rice-paper/95 backdrop-blur-md"
            >
              Next
            </EnhancedButton>
          </div>
        </div>
      </EnhancedCard>
    );
  };

  // Enhanced image viewer component
  const renderImageViewer = (artwork: Artwork, index: number) => {
    const primaryImage = artwork.images.find(img => img.type === 'primary') || artwork.images[0];
    if (!primaryImage) return null;

    return (
      <div className="relative w-full h-full bg-gradient-to-br from-rice-paper to-silk-cream rounded-lg overflow-hidden">
        <div className="aspect-video relative">
          <img
            ref={el => imageRefs.current[index] = el}
            src={primaryImage.urls.large}
            alt={artwork.title.english}
            className="w-full h-full object-contain"
          />

          {/* Enhanced info overlay */}
          <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-ink-black/80 to-transparent p-4">
            <div className="text-rice-paper">
              <h3 className="font-calligraphy text-lg font-bold mb-1">
                {artwork.title.original}
              </h3>
              <p className="text-rice-paper/90 mb-1">{artwork.title.english}</p>
              <p className="text-rice-paper/80 text-sm">{artwork.artist.name}</p>
              <div className="flex items-center gap-2 mt-2">
                <Badge variant="outline" className="text-xs border-rice-paper/30 text-rice-paper">
                  {artwork.historical_context.creation_date.period}
                </Badge>
                <Badge variant="outline" className="text-xs border-rice-paper/30 text-rice-paper">
                  {artwork.artistic_analysis.style.name.english}
                </Badge>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Enhanced analysis panel
  const renderAnalysisPanel = () => {
    if (!showAnalysis || !analysis) return null;

    return (
      <EnhancedCard variant="elevated" className={cn('mt-6', animations.slideIn)}>
        <EnhancedCardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <BookOpen className="w-5 h-5 text-temple-gold" />
              <EnhancedCardTitle>AI-Powered Comparative Analysis</EnhancedCardTitle>
            </div>
            <EnhancedButton
              size="sm"
              variant="ghost"
              onClick={() => setShowAnalysis(false)}
              className="h-8 w-8 p-0"
            >
              ✕
            </EnhancedButton>
          </div>
        </EnhancedCardHeader>
        <EnhancedCardContent className="space-y-6">
          {/* Expert Commentary */}
          {analysis.expert_commentary && (
            <div className="bg-temple-gold/10 rounded-lg p-4 border-l-4 border-temple-gold">
              <h4 className="font-medium text-ink-black mb-2 flex items-center gap-2">
                <Target className="w-4 h-4" />
                Expert Commentary
              </h4>
              <p className="text-sm text-ink-black/80 italic leading-relaxed">
                "{analysis.expert_commentary}"
              </p>
            </div>
          )}

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Similarities */}
            <div>
              <h4 className="font-semibold text-ink-black mb-3 flex items-center gap-2">
                <Circle className="w-4 h-4 text-summer-jade" />
                Key Similarities
              </h4>
              <ul className="space-y-2">
                {analysis.similarities.map((similarity, index) => (
                  <li key={index} className="flex items-start gap-2 text-sm">
                    <div className="w-1.5 h-1.5 bg-summer-jade rounded-full mt-2 flex-shrink-0" />
                    <span className="text-ink-black/80">{similarity}</span>
                  </li>
                ))}
              </ul>
            </div>

            {/* Differences */}
            <div>
              <h4 className="font-semibold text-ink-black mb-3 flex items-center gap-2">
                <Square className="w-4 h-4 text-vermillion" />
                Notable Differences
              </h4>
              <ul className="space-y-2">
                {analysis.differences.map((difference, index) => (
                  <li key={index} className="flex items-start gap-2 text-sm">
                    <div className="w-1.5 h-1.5 bg-vermillion rounded-full mt-2 flex-shrink-0" />
                    <span className="text-ink-black/80">{difference}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>

          {/* Technical Analysis */}
          <div>
            <h4 className="font-semibold text-ink-black mb-3 flex items-center gap-2">
              <Ruler className="w-4 h-4 text-celadon-green" />
              Technical Analysis
            </h4>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {Object.entries(analysis.techniques).map(([key, value]) => (
                <div key={key} className="bg-silk-cream/50 rounded-lg p-3">
                  <h5 className="font-medium text-ink-black mb-2 capitalize">
                    {key.replace('_', ' ')}
                  </h5>
                  <p className="text-sm text-ink-black/80">{value}</p>
                </div>
              ))}
            </div>
          </div>

          {/* Cultural Context */}
          <div className="bg-gradient-to-r from-temple-gold/10 to-autumn-gold/10 rounded-lg p-4">
            <h4 className="font-semibold text-ink-black mb-3 flex items-center gap-2">
              <Palette className="w-4 h-4 text-temple-gold" />
              Cultural Context
            </h4>
            <p className="text-sm text-ink-black/80 leading-relaxed">{analysis.cultural_context}</p>
          </div>

          {/* Educational Notes */}
          {analysis.educational_notes.length > 0 && (
            <div>
              <h4 className="font-semibold text-ink-black mb-3 flex items-center gap-2">
                <BookOpen className="w-4 h-4 text-celadon-green" />
                Educational Insights
              </h4>
              <div className="space-y-2">
                {analysis.educational_notes.map((note, index) => (
                  <div key={index} className="bg-celadon-green/10 rounded-md p-3">
                    <p className="text-sm text-ink-black/80">{note}</p>
                  </div>
                ))}
              </div>
            </div>
          )}
        </EnhancedCardContent>
      </EnhancedCard>
    );
  };

  return (
    <div className={cn(
      'space-y-6',
      isFullscreen && 'fixed inset-0 z-50 bg-rice-paper p-6 overflow-auto',
      className
    )}>
      {/* Enhanced Header */}
      <div className="text-center space-y-4">
        <h1 className="font-calligraphy text-3xl font-bold text-ink-black">
          Enhanced Artwork Comparison
        </h1>
        <p className="text-ink-black/70 max-w-2xl mx-auto">
          Compare artworks side by side with AI-powered analysis to understand 
          techniques, styles, and cultural elements in traditional calligraphy
        </p>
        
        {/* Usage metrics */}
        {showEducationalFeatures && (
          <div className="flex items-center justify-center gap-6 text-sm text-ink-black/60">
            <div className="flex items-center gap-1">
              <Eye className="w-4 h-4" />
              <span>{Math.floor(metrics.viewTime / 1000)}s viewed</span>
            </div>
            <div className="flex items-center gap-1">
              <ZoomIn className="w-4 h-4" />
              <span>{metrics.zoomInteractions} zoom interactions</span>
            </div>
            <div className="flex items-center gap-1">
              <Compare className="w-4 h-4" />
              <span>{metrics.analysisRequests} analyses requested</span>
            </div>
          </div>
        )}
      </div>

      {/* Artwork Selector */}
      {renderArtworkSelector()}

      {/* Enhanced Toolbar */}
      {renderToolbar()}

      {/* Comparison View */}
      {renderComparisonView()}

      {/* Analysis Panel */}
      {renderAnalysisPanel()}
    </div>
  );
};

export default EnhancedArtworkComparison;